// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String
  email     String   @unique
  password  String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  reports     Report[]
  questions   Question[]
  experiences Experience[]
  answers     Answer[]
  comments    Comment[]

  @@map("users")
}

model Report {
  id             String   @id @default(cuid())
  userId         String
  name           String
  age            Int
  location       Json
  bullyingType   String
  perpetratorInfo Json
  evidenceLinks  String[]
  timestamp      DateTime @default(now())
  status         String   @default("pending")
  severity       String   @default("medium")
  isAnonymous    Boolean  @default(false)
  description    String?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model Question {
  id          String   @id @default(cuid())
  userId      String
  username    String
  title       String
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isAnonymous Boolean  @default(false)
  status      String   @default("pending")
  description String?

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers Answer[]

  @@map("questions")
}

model Answer {
  id          String   @id @default(cuid())
  questionId  String
  userId      String
  username    String
  content     String
  timestamp   DateTime @default(now())
  isAnonymous Boolean  @default(false)
  likes       Int      @default(0)
  isAdminResponse Boolean @default(false)

  // Relations
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("answers")
}

model Experience {
  id          String   @id @default(cuid())
  userId      String
  title       String
  content     String
  tags        String[]
  timestamp   DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      String   @default("pending")
  likes       Int      @default(0)
  isAnonymous Boolean  @default(false)
  description String?

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]

  @@map("experiences")
}

model Comment {
  id           String   @id @default(cuid())
  experienceId String
  userId       String
  username     String
  content      String
  timestamp    DateTime @default(now())
  isAnonymous  Boolean  @default(false)
  likes        Int      @default(0)

  // Relations
  experience Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}